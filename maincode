#include <iostream>
#include <conio.h>
#include <windows.h>

using namespace std;

// Function to set the cursor position in the console window
void co_ordinate(int x, int y) {
    COORD c;
    c.X = x;
    c.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), c);
}

void createBoundary(int hor_len, int ver_len, int player1score, int player2score) {
    for (int i = 0; i < hor_len; ++i)
        cout << "*";  // Print the top border

    cout << endl;

    for (int i = 1; i < ver_len - 1; ++i) {
        cout << "*";  // Print left border

        for (int j = 1; j < hor_len - 1; ++j)
            cout << " ";  // Print empty space inside the boundary

        cout << "*" << endl;  // Print right border
    }

    for (int i = 0; i < hor_len; ++i)
        cout << "*";  // Print the bottom border

         co_ordinate(hor_len / 2 - 5, ver_len + 1); // Move the score display one line below the bottom border
    cout << "Score: " << player1score << " - " << player2score;


    cout << endl;
}


int main()
{
  //window screen
const int hor_len=44;
const int ver_len=20;
int batsize=3;

  //initial position of bat
int batpos_left=ver_len/2-batsize/2;

int batpos_right=ver_len/2-batsize/2;

//initial poition of ball
 int ballX = hor_len / 2;
 int ballY = ver_len / 2;

//initial speed of the ball
int ballspd_X = 0;
int ballspd_Y = 0;

//initial score of both players
    int player1score = 0;
    int player2score = 0;


char input;

while (player1score<=100 && player2score<=100) {
        createBoundary(hor_len, ver_len, player1score, player2score);

        // Display bats
        for (int i = 0; i < batsize; i++) {
            co_ordinate(2, batpos_left + i); //border theke bat upore thakar jonno
            cout << "|";
            co_ordinate(hor_len - 3, batpos_right + i);  //-1-2=-3(-1 hocche indexing er jonno)
            cout << "|";
        }
// Display ball
        co_ordinate(ballX, ballY);
        cout << "O";



// Move bats based on input
        if (_kbhit()) {
            input = _getch();

            switch (input) {
            case 'a':
                 ballspd_X = -1;
                 ballspd_Y = -1;
            case 's':
                if (batpos_left > 0)
                batpos_left--;
                break;
            case 'x':
                if (batpos_left < ver_len - batsize)
                batpos_left++;
                break;
            case 'k':
                if (batpos_right > 0)
                batpos_right--;
                break;
            case 'm':
                if (batpos_right < ver_len - batsize)
                batpos_right++;
                break;
           case 'b':
                  ballspd_X=0;
                  ballspd_Y=0;
                  break;
           case 'n':  //center theke start
                  ballX = hor_len / 2;
                  ballY = ver_len / 2;
                  ballspd_X = -1;
                  ballspd_Y = -1;
                  break;
           case 'v':
                   ballspd_X = -ballspd_X;
                    ballspd_X = 1;
                    ballspd_Y = -1;
                    break;

           case 'c':
                   ballspd_X = -ballspd_X;
                    ballspd_X = -1;
                    ballspd_Y = 1;
                    break;



            }
        }
 // Move ball
        ballX += ballspd_X;
        ballY += ballspd_Y;

        // Ball collision with walls
        if (ballY == 1 || ballY == ver_len - 2) {  //<<<<<<<
            ballspd_Y = -ballspd_Y;
        }
// Ball collision with bats
        if (ballX == 3 && (ballY >= batpos_left && ballY < batpos_left + batsize)) {  //<<<<<<<
            ballspd_X = -ballspd_X;
        }

        if (ballX == hor_len-4 && (ballY >= batpos_right && ballY < batpos_right + batsize)) {   //<<<<<<<<
            ballspd_X = -ballspd_X;
        }

        // Ball out of bounds
        if (ballX < 0) {
            player2score+=10;


            ballX = 3; //<<<<<<<<<<
            ballY = ver_len / 2;
            ballspd_X=0;
            ballspd_Y=0;


        }

        if (ballX >= hor_len) {
            player1score+=10;

            ballX = hor_len-4;;//<<<<<<<<<
            ballY = ver_len / 2;
            ballspd_X=0;
            ballspd_Y=0;


        }


        // Slow down the game a bit
        Sleep(200);

        // Clear the screen
        system("cls");


}
       co_ordinate(hor_len / 2, ver_len/2); // Move below the score
           cout << "Game Over!" << endl;

    return 0;

}
